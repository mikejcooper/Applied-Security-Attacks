import binascii
import numpy
from Crypto.Cipher import AES


# Rijndael S-box
s = [   0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
        0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
        0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
        0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
        0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
        0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
        0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
        0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
        0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
        0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
        0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
        0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
        0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
        0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
        0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
        0x54, 0xbb, 0x16
    ]

def AES_XTS_Check(key1, key2, i, j, c):
    key1 = HexToByte(key1)
    key2 = HexToByte(key2)
    _i = HexToByte(i)
    c = os2ip(c)

    T = AES.new(key2).encrypt(_i)
    T = os2ip(ByteToHex(T))
    # Next operation: Group multiplication with j, but j = 0. Therefore T stays the same.
    CC = c ^ T
    PP = AES.new(key1).decrypt(HexToByte(i2osp( CC )))
    PP = os2ip(ByteToHex(PP))
    P = PP ^ T
    return i2osp(P)

# Convert hex to Byte List
def HexToByteList(hex_string):
    return [int(hex_string[i:i+2], 16) for i in range(0, len(hex_string) - 1, 2)]

# Convert hex to Byte List
def ByteListToHexString(byteList):
    return "".join([("%X" % byte).zfill(2) for byte in byteList])

# Convert Byte (4 bit) string to Hex (2 bit) string
def ByteToHex(byte_string) :
    if len(byte_string) <= 16:
        return binascii.hexlify(byte_string).zfill(32)
    else :
        return byte_string.zfill(32)

# Convert Hex (2 bit) string to Hex (4 bit) string
def HexToByte(hex_string) :
    if len(hex_string) <= 16:
        return hex_string.zfill(16)
    else :
        return hex_string.strip().zfill(16).decode('hex').zfill(16)

# Octal String to Integer
def os2ip(X):
    if isinstance(X, ( int, long )):
        return X
    elif X == '':
        return 0
    else:
        return int(X, 16)

# Integer to Octal String
def i2osp(X):
    if isinstance(X, basestring):
        return X.zfill(32)
    else:
        return format(X, 'X').zfill(32)


# Convert to Hex string
def toHex(X):
    if isinstance(X, ( int, long )):
        return ("%X" % X).zfill(2)
    elif X == '':
        return 0
    else:
        return X.encode('hex')

# Utils for ATTACK

def getTrace(_traces) :
    __traces = _traces.split(',')[1:]
    traces = []
    for i in __traces:
        traces.append(int(i))
    return (traces)

def preprocessTrace(_traces):
    avg = numpy.mean(_traces)
    std = numpy.std(_traces)
    x = std
    traces = []
    for i in _traces:
        if i > x + avg or i < avg - x:
            traces.append(int(i))
    return traces

def sameLengthTraceSets(traces):
    smallest = len(traces[0])
    for t in traces:
        if len(t) < smallest:
            smallest = len(t)
    for i in range(len(traces)):
        tmp = traces[i]
        traces[i] = tmp[:smallest]
    return traces

def printComparison(newByte, i, key):
    if key == 1:
        str1 = "4BD55725A2D190A44D73764FE3EC68F7"
    else:
        str1 = "2BDC1E95C035F9520ACF58EEC0C30B88"
    ind = i * 2
    str_i = str1[ind:ind + 2]

    scale = 16  ## equals to hexadecimal
    num_of_bits = 8
    print "True:  Byte " + str(i) + " : " + bin(int(str_i, scale))[2:].zfill(num_of_bits) + " : " + str_i.zfill(2)
    print "Guess: Byte " + str(i) + " : " + bin(int(newByte, scale))[2:].zfill(num_of_bits) + " : " + newByte.zfill(2)


def getByte(ciphertext, index) :
    return int(ciphertext[index*2 : index*2 + 2], 16)
