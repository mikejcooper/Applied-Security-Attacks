-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [35] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited 
by the assignment description of course).  Let us know what third-party 
source code or resources you used (if any) so it's clear what's your work 
and what isn't:

[Referenced in code and question where appropriate.]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as the efficiency, robustness, 
generality, realism, or style of a solution.

[X] Stage 1 : an attack based on error messages
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [BB0F1213E082E6A528424173507AB7B360E3BDBBA9A81083B25974A039]

[X] Stage 2 : an attack based on execution time
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [A7482536D8F7C91B]

[X] Stage 3 : an attack based on an injected fault
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [CB6818217807A5E2599A286817349133]

[X] Stage 4 : an attack based on power consumption
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [4BD55725A2D190A44D73764FE3EC68F72BDC1E95C035F9520ACF58EEC0C30B88]

                                                                     ------
                                                                     (400%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

To run all stages, use command in questions e.g. "bash$ ./attack ${USER}.D ${USER}.conf"
    However you may need to change permissions of the executable.
      - "bash$ chmod +x ./attack"
    IF this does not work: 
      - "bash$ python attack.py ./${USER}.D ${USER}.conf"

Time:
    [A] Error testing allows saleability for harder problems. It dynamically increases sample sizes if decryption fails.
    I calculate the certainty of each bit choice based on a Margin value and revert to different position in decryption
    based on when/where these areas of uncertainty occur.

    I have calculated that the majority of time is spent doing montgomery multiplications. I perform 4 multiplications 
    for each ciphertext for each bit. So approx: 4 * 6000 * 64 = 1,536,000. I am unsure why the code takes over 150s to run 
    when other implementations I have seen in C & Java with a similar number of multiplications take a faction of the time. 
    The only conclusion I can find is that python does not deal with 'Big Integers' in an efficent way.  

-------------------------------------------------------------------------------