-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

Stage 1 + 2
effort : 40 hours

Stage 3 + 4
effort : 45 hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited
by the assignment description of course).  Let us know what third-party
source code or resources you used (if any) so it's clear what's your work
and what isn't:

STAGE 1:

     J. Jonsson and B. Kaliski. Public-Key Cryptography Standards (PKCS) #1: RSA
     cryptography specification, version 2.1. Internet Engineering Task Force
     (IETF) Request for Comments (RFC) 3447, 2003.
     http://tools.ietf.org/html/rfc3447.

     J. Manger.  A Chosen Ciphertext Attack on RSA Optimal Asymmetric Encryption
     Padding (OAEP) as Standardized in PKCS #1 v2.0. In J. Kilian, editor,
     Advances in Cryptology - Crypto 2001, volume 2139 of Lecture Notes in
     Computer Science, pp. 260 - 274.  Springer Verlag, 2001.

STAGE 2:

    https://wiki.python.org/moin/PythonSpeed/PerformanceTips

    C¸ .K. Koc¸, T. Acar, and B.S. Kaliski. Analyzing and comparing Montgomery
    multiplication algorithms. IEEE Micro, 16(3):26–33, 1996.

    A Practical Implementation of the Timing Attack, Dhem et al., 1998
    http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.12.3070

STAGE 3:
    I used the framework provided during the lab session for interacting with the
    target device.

    Lecture slides for operations in F8.

    http://anh.cs.luc.edu/331/code/aes.py
    SubBytes Matrix

STAGE 4:
    I used the framework provided during the lab session for interacting with the
    target device.

    http://www.dpabook.org/onlinematerial/matlabscripts/index.htm

    http://anh.cs.luc.edu/331/code/aes.py

    Lecture slides

    Questions:
    http://users.wpi.edu/~martin/MQP/hnathpettengill.pdf
    https://www.blackhat.com/presentations/bh-usa-07/De_Haas/Presentation/bh-usa-07-de_haas.pdf
    http://www.uclouvain.be/crypto/wissec2009/static/5.pdf

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious element (e.g., the functional correctness of a stage).
For example, other elements outside this list *often* warrant an increase
or decrease in marks; examples include hard to quantify features such as
the style or efficiency of a solution.

[X] Stage 1 : an attack based on error messages

              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 40%)
              - analysis questions                                   ( 20%)

              target material : 3DD686707D8748C0250F7AA18F2299E34E8374C7

[X] Stage 2 : an attack based on execution time

              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 40%)
              - analysis questions                                   ( 20%)

              target material : D8F45CD47C0CDDE7

[?] Stage 3 : an attack based on an injected fault

              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 40%)
              - analysis questions                                   ( 20%)

              target material : 93DED32B7BC65361AF837E57A7E94

[?] Stage 4 : an attack based on power consumption

              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 40%)
              - analysis questions                                   ( 20%)

              target material : 61A4C140DD7409B8066A36F92AEF097A
                                                                     ------
                                                                     (400%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

    I worked on Snowy.

    Running fault attack with one fault:
    python attack.py ./52610.D 1

    Running fault attack with two faults:
    python attack.py ./52610.D 2

    Running fault attack with both one and two faults, two attacks:
    python attack.py ./52610.D 0

    Running power attack:
    python attack.py ./52610.D

    The fault attack and the power attack check if the library Crypto.Cipher is
    available, if not they use the previously recovered keys to test if the new
    key is valid. I run my attacks on Snowy and recovered the keys, then hard-coded
    them in the test functions so I can test my attacks on machines that do not
    have Crypto.Cipher.

-------------------------------------------------------------------------------
